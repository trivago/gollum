# -*- yaml -*-
#
# Gollum log stream example
#
# This configuration demonstrates handling Gollum's internal log
# stream (_GOLLUM_) using Gollum's own plugins.
#
# Messages in the _GOLLUM_ stream have, in addition to the payload
# message, the following metadata fields:
# 
# "Level:
#   Severity of the message as a string, as returned
#   by logrus.Entry.Level.String(), see
#   https://github.com/sirupsen/logrus/blob/master/logrus.go
#
# Time:
#   Time the log event was created, as returned by
#   logrus.Entry.Time.String()
#
# PluginID:
#   Identifier of this plugin instance as defined in the
#   Gollum config file. For messages from Gollum's core,
#   this is absent (and matches "").
#
# PluginType:
#   Go type name of the plugin that generated the
#   message, preceded by the Go package name and a dot. e.g.
#   "consumer.File". For messages from Gollum's core, this
#   is absent (and matches "").
#
# Scope:
#   Optional field set by "Subscoped" loggers.
#
# Additional Logrus "Fields" set in the Logger instance will
# also appear as metadata keys in the Gollum message.

# Generate some junk data & log events
JunkGenerator:
  Type: "consumer.Profiler"
  Message: "%20s"
  Streams: "junkstream"
  Characters: "abcdefghijklmZ"
  KeepRunning: true
  Runs: 10000
  Batches: 3000000
  DelayMs: 500

# Write junk data to a file
JunkProd00:
  Type: "producer.File"
  File: "/tmp/gollum/junk.out"
  Streams: "junkstream"
  Modulators:
    - "filter.RegExp":
        Expression: "Z"
    - "format.Envelope":
        Prefix: "[junk_00] "

# Write all messages to the console
GollumLogDebug:
  Type: "producer.Console"
  Streams: "_GOLLUM_"
  Modulators:
    # Append a newline
    - "format.Envelope"

# Log events from Gollum core to a separate file
GollumLogCore:
  Type: "producer.File"
  File: "/tmp/gollum/core.log"
  Streams: "_GOLLUM_"
  Enable: true
  Modulators:
    # Match PluginType == ""
    - "filter.RegExp":
        Expression: "$^"
        ApplyTo: "PluginType"
    # Append a newline
    - "format.Envelope"

# Log events from the consumer.Profiler plugin to a separate file
GollumLogProfiler:
  Type: "producer.File"
  File: "/tmp/gollum/consumer.profiler.log"
  Streams: "_GOLLUM_"
  Enable: true
  Modulators:
    - "filter.RegExp":
        Expression: "consumer.Profiler"
        ApplyTo: "PluginType"
    - "format.Envelope"

# All messages where level >= warning
GollumLogWarn:
  Type: "producer.File"
  File: "/tmp/gollum/warn.log"
  Streams: "_GOLLUM_"
  Enable: true
  Modulators:
    - "filter.RegExp":
        Expression: "(warn|error|fatal|panic)"
        ApplyTo: "Level"
    - "format.Envelope"

# Match a string in the payload
GollumLogTest:
  Type: "producer.File"
  File: "/tmp/gollum/test.log"
  Streams: "_GOLLUM_"
  Enable: true
  Modulators:
    # Filter messages based on payload
    - "filter.RegExp":
        Expression: "Creating"
    - "format.Envelope"
